{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "s_priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe_NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "s_n",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "s_n",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x02cff5a46612a0dc3188e56e90df35f5e12b1718530f68f0306475b7e448dffe",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1023580",
        "logsBloom": "0x
        "blockHash": "0xfd4b8d61a87c1376430214535a4247a6557296df4fd154ddb76fed1b634899e5",
        "transactionHash": "0x02cff5a46612a0dc3188e56e90df35f5e12b1718530f68f0306475b7e448dffe",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1023580",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "9c2ee15583a7fc26b7a0c067ffb33357",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_n\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s_n\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Yash\",\"details\":\"This implements priceFeeds as libraries\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"for developers\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contracts\"}},\"notice\":\"This is a demo of sample funding project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe_NotOwner();\\n\\n// natspec\\n/** @title A contract for crowd funding\\n *  @author Yash\\n *  @notice This is a demo of sample funding project\\n *  @dev This implements priceFeeds as libraries\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    address private immutable i_owner;\\n    uint256 private constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe_NotOwner();\\n        _;\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /** @notice This function funds this contracts\\n     *   @dev for developers\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address s_n\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[s_n];\\n    }\\n\\n    function getFunder(uint256 s_n) public view returns (address) {\\n        return s_funders[s_n];\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 s_funderIndex = 0;\\n            s_funderIndex < s_funders.length;\\n            s_funderIndex++\\n        ) {\\n            address funder = s_funders[s_funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // transfer\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x150e88f33ad56fb5d5dd4abeedc131914f52c6fb445b8c8d8d2c1c488f3726fd\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeedAddress\\r\\n    ) internal view returns (uint256) {\\r\\n        // Goerli ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n        // );\\r\\n        AggregatorV3Interface priceFeed = priceFeedAddress;\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x772ba7bdfdba135151588aec2b1b1f5fb9806fb3df7fa378c36be8752da761d1\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012ac380380620012ac833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611126620001866000396000818161030c0152818161054e0152818161059e015261079401526111266000f3fe6080604052600436106100745760003560e01c80639e87a5cd1161004e5780639e87a5cd1461010c578063b60d428814610137578063be2693f014610141578063d7b4750c1461014b57610083565b80630343fb251461008d5780633ccfd60b146100ca578063893d20e8146100e157610083565b3661008357610081610188565b005b61008b610188565b005b34801561009957600080fd5b506100b460048036038101906100af9190610a5e565b6102c2565b6040516100c19190610aa4565b60405180910390f35b3480156100d657600080fd5b506100df61030a565b005b3480156100ed57600080fd5b506100f661054a565b6040516101039190610ace565b60405180910390f35b34801561011857600080fd5b50610121610572565b60405161012e9190610b48565b60405180910390f35b61013f610188565b005b61014961059c565b005b34801561015757600080fd5b50610172600480360381019061016d9190610b8f565b61082a565b60405161017f9190610ace565b60405180910390f35b6802b5e3af16b18800006101c7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087290919063ffffffff16565b1015610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff90610c19565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102569190610c68565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038f576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561043a576000600182815481106103b5576103b4610cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061043290610ced565b915050610392565b50600067ffffffffffffffff81111561045657610455610d36565b5b6040519080825280602002602001820160405280156104845781602001602082028036833780820191505090505b506001908051906020019061049a929190610954565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104c190610d96565b60006040518083038185875af1925050503d80600081146104fe576040519150601f19603f3d011682016040523d82523d6000602084013e610503565b606091505b5050905080610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610df7565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610621576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106a557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161065b575b5050505050905060005b815181101561072f5760008282815181106106cd576106cc610cbe565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061072790610ced565b9150506106af565b50600067ffffffffffffffff81111561074b5761074a610d36565b5b6040519080825280602002602001820160405280156107795781602001602082028036833780820191505090505b506001908051906020019061078f929190610954565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107d690610d96565b60006040518083038185875af1925050503d8060008114610813576040519150601f19603f3d011682016040523d82523d6000602084013e610818565b606091505b505090508061082657600080fd5b5050565b6000600182815481106108405761083f610cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061087e836108ae565b90506000670de0b6b3a764000085836108979190610e17565b6108a19190610ea0565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109349190610f5e565b5050509150506402540be4008161094b9190610fd9565b92505050919050565b8280548282559060005260206000209081019282156109cd579160200282015b828111156109cc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610974565b5b5090506109da91906109de565b5090565b5b808211156109f75760008160009055506001016109df565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2b82610a00565b9050919050565b610a3b81610a20565b8114610a4657600080fd5b50565b600081359050610a5881610a32565b92915050565b600060208284031215610a7457610a736109fb565b5b6000610a8284828501610a49565b91505092915050565b6000819050919050565b610a9e81610a8b565b82525050565b6000602082019050610ab96000830184610a95565b92915050565b610ac881610a20565b82525050565b6000602082019050610ae36000830184610abf565b92915050565b6000819050919050565b6000610b0e610b09610b0484610a00565b610ae9565b610a00565b9050919050565b6000610b2082610af3565b9050919050565b6000610b3282610b15565b9050919050565b610b4281610b27565b82525050565b6000602082019050610b5d6000830184610b39565b92915050565b610b6c81610a8b565b8114610b7757600080fd5b50565b600081359050610b8981610b63565b92915050565b600060208284031215610ba557610ba46109fb565b5b6000610bb384828501610b7a565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c03601b83610bbc565b9150610c0e82610bcd565b602082019050919050565b60006020820190508181036000830152610c3281610bf6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610a8b565b9150610c7e83610a8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cb357610cb2610c39565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf882610a8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2b57610d2a610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d80600083610d65565b9150610d8b82610d70565b600082019050919050565b6000610da182610d73565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de1600b83610bbc565b9150610dec82610dab565b602082019050919050565b60006020820190508181036000830152610e1081610dd4565b9050919050565b6000610e2282610a8b565b9150610e2d83610a8b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6657610e65610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eab82610a8b565b9150610eb683610a8b565b925082610ec657610ec5610e71565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef081610ed1565b8114610efb57600080fd5b50565b600081519050610f0d81610ee7565b92915050565b6000819050919050565b610f2681610f13565b8114610f3157600080fd5b50565b600081519050610f4381610f1d565b92915050565b600081519050610f5881610b63565b92915050565b600080600080600060a08688031215610f7a57610f796109fb565b5b6000610f8888828901610efe565b9550506020610f9988828901610f34565b9450506040610faa88828901610f49565b9350506060610fbb88828901610f49565b9250506080610fcc88828901610efe565b9150509295509295909350565b6000610fe482610f13565b9150610fef83610f13565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102e5761102d610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106b5761106a610c39565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a8576110a7610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e5576110e4610c39565b5b82820290509291505056fea26469706673582212207bdb98343b13cef20a5c871269f0069d799491ed91729891ed18f195ec12ace364736f6c63430008080033",
    "deployedBytecode": "0x6080604052600436106100745760003560e01c80639e87a5cd1161004e5780639e87a5cd1461010c578063b60d428814610137578063be2693f014610141578063d7b4750c1461014b57610083565b80630343fb251461008d5780633ccfd60b146100ca578063893d20e8146100e157610083565b3661008357610081610188565b005b61008b610188565b005b34801561009957600080fd5b506100b460048036038101906100af9190610a5e565b6102c2565b6040516100c19190610aa4565b60405180910390f35b3480156100d657600080fd5b506100df61030a565b005b3480156100ed57600080fd5b506100f661054a565b6040516101039190610ace565b60405180910390f35b34801561011857600080fd5b50610121610572565b60405161012e9190610b48565b60405180910390f35b61013f610188565b005b61014961059c565b005b34801561015757600080fd5b50610172600480360381019061016d9190610b8f565b61082a565b60405161017f9190610ace565b60405180910390f35b6802b5e3af16b18800006101c7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087290919063ffffffff16565b1015610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff90610c19565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102569190610c68565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038f576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561043a576000600182815481106103b5576103b4610cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061043290610ced565b915050610392565b50600067ffffffffffffffff81111561045657610455610d36565b5b6040519080825280602002602001820160405280156104845781602001602082028036833780820191505090505b506001908051906020019061049a929190610954565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104c190610d96565b60006040518083038185875af1925050503d80600081146104fe576040519150601f19603f3d011682016040523d82523d6000602084013e610503565b606091505b5050905080610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610df7565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610621576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106a557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161065b575b5050505050905060005b815181101561072f5760008282815181106106cd576106cc610cbe565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061072790610ced565b9150506106af565b50600067ffffffffffffffff81111561074b5761074a610d36565b5b6040519080825280602002602001820160405280156107795781602001602082028036833780820191505090505b506001908051906020019061078f929190610954565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107d690610d96565b60006040518083038185875af1925050503d8060008114610813576040519150601f19603f3d011682016040523d82523d6000602084013e610818565b606091505b505090508061082657600080fd5b5050565b6000600182815481106108405761083f610cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061087e836108ae565b90506000670de0b6b3a764000085836108979190610e17565b6108a19190610ea0565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109349190610f5e565b5050509150506402540be4008161094b9190610fd9565b92505050919050565b8280548282559060005260206000209081019282156109cd579160200282015b828111156109cc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610974565b5b5090506109da91906109de565b5090565b5b808211156109f75760008160009055506001016109df565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2b82610a00565b9050919050565b610a3b81610a20565b8114610a4657600080fd5b50565b600081359050610a5881610a32565b92915050565b600060208284031215610a7457610a736109fb565b5b6000610a8284828501610a49565b91505092915050565b6000819050919050565b610a9e81610a8b565b82525050565b6000602082019050610ab96000830184610a95565b92915050565b610ac881610a20565b82525050565b6000602082019050610ae36000830184610abf565b92915050565b6000819050919050565b6000610b0e610b09610b0484610a00565b610ae9565b610a00565b9050919050565b6000610b2082610af3565b9050919050565b6000610b3282610b15565b9050919050565b610b4281610b27565b82525050565b6000602082019050610b5d6000830184610b39565b92915050565b610b6c81610a8b565b8114610b7757600080fd5b50565b600081359050610b8981610b63565b92915050565b600060208284031215610ba557610ba46109fb565b5b6000610bb384828501610b7a565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c03601b83610bbc565b9150610c0e82610bcd565b602082019050919050565b60006020820190508181036000830152610c3281610bf6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610a8b565b9150610c7e83610a8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cb357610cb2610c39565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf882610a8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2b57610d2a610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d80600083610d65565b9150610d8b82610d70565b600082019050919050565b6000610da182610d73565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de1600b83610bbc565b9150610dec82610dab565b602082019050919050565b60006020820190508181036000830152610e1081610dd4565b9050919050565b6000610e2282610a8b565b9150610e2d83610a8b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6657610e65610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eab82610a8b565b9150610eb683610a8b565b925082610ec657610ec5610e71565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef081610ed1565b8114610efb57600080fd5b50565b600081519050610f0d81610ee7565b92915050565b6000819050919050565b610f2681610f13565b8114610f3157600080fd5b50565b600081519050610f4381610f1d565b92915050565b600081519050610f5881610b63565b92915050565b600080600080600060a08688031215610f7a57610f796109fb565b5b6000610f8888828901610efe565b9550506020610f9988828901610f34565b9450506040610faa88828901610f49565b9350506060610fbb88828901610f49565b9250506080610fcc88828901610efe565b9150509295509295909350565b6000610fe482610f13565b9150610fef83610f13565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102e5761102d610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106b5761106a610c39565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a8576110a7610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e5576110e4610c39565b5b82820290509291505056fea26469706673582212207bdb98343b13cef20a5c871269f0069d799491ed91729891ed18f195ec12ace364736f6c63430008080033",
    "devdoc": {
        "author": "Yash",
        "details": "This implements priceFeeds as libraries",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "for developers"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contracts"
            }
        },
        "notice": "This is a demo of sample funding project",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 59,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
